{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Make sure Composer is installed globally, as explained in the installation chapter of the Composer documentation. Installation with Symfony Flex Add our recipes endpoint { \"extra\": { \"symfony\": { \"endpoint\": [ \"https://api.github.com/repos/Enabel/recipes/contents/index.json?ref=flex/main\", \"flex://defaults\" ], \"allow-contrib\": true } } } Don't forget to run compose update as you have just modified his configuration. Install with composer composer require enabel/user-bundle Setup database bin/console make:migration bin/console doctrine:migration:migrate Installation without Symfony Flex Step 1: Download the Bundle Open a command console, enter your project directory and execute the following command to download the latest stable version of this bundle: composer require enabel/user-bundle Step 2: Enable the Bundle Then, enable the bundle by adding it to the list of registered bundles in the config/bundles.php file of your project: // config/bundles.php return [ // ... Enabel\\UserBundle\\EnabelUserBundle::class => ['all' => true], KnpU\\OAuth2ClientBundle\\KnpUOAuth2ClientBundle::class => ['all' => true], ]; Step 3: Import routing configuration enable the routes by adding it to the list of registered routes in the config/routes.yaml file of your project: # config/routes.yaml enabel_user: resource: \"@EnabelUserBundle/config/routes.yaml\" Step 4: Create the configuration Create a file /config/packages/enabel_user.yaml with this content: enabel_user: login_redirect_route: 'app_home' user_class: 'App\\Entity\\Enabel\\User' user_repository: 'App\\Repository\\Enabel\\UserRepository' available_locales: 'fr|en' Create/Update a file /config/packages/knpu_oauth2_client.yaml with this content: knpu_oauth2_client: clients: azure_o365: type: azure client_id: '%env(AZURE_CLIENT_ID)%' client_secret: '%env(AZURE_CLIENT_SECRET)%' api_version: 'v1.0' url_api: 'https://graph.microsoft.com/' redirect_route: enabel_azure_check Add the Azure variable in you .env file: ###> enabel/user-bundle ### AZURE_CLIENT_ID=paste_here_the_client_id AZURE_CLIENT_SECRET=paste_here_the_secret_id ###< enabel/user-bundle ### Step 5: Create entity & repository Create a entity and repository that extends the bundle one. The User entity /src/entity/Enabel/User.php <?php declare(strict_types=1); namespace App\\Entity\\Enabel; use App\\Repository\\Enabel\\UserRepository; use Doctrine\\ORM\\Mapping as ORM; use Enabel\\UserBundle\\Entity\\User as BaseUser; #[ORM\\Entity(repositoryClass: UserRepository::class)] class User extends BaseUser { } The according repository /src/Repository/Enabel/UserRepository.php <?php declare(strict_types=1); namespace App\\Repository\\Enabel; use App\\Entity\\Enabel\\User; use Doctrine\\Persistence\\ManagerRegistry; use Enabel\\UserBundle\\Repository\\UserRepository as BaseUserRepository; /** * @method User|null find($id, $lockMode = null, $lockVersion = null) * @method User|null findOneBy(array $criteria, array $orderBy = null) * @method array<User> findAll() * @method array<User> findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null) */ class UserRepository extends BaseUserRepository { public function __construct(ManagerRegistry $registry) { parent::__construct($registry, User::class); } } Step 6: Create the admin crud controller Create a easyadmin crud controller that extends the bundle one. To manage user /src/Controller/Admin/Enabel/UserCrudController.php <?php declare(strict_types=1); namespace App\\Controller\\Admin\\Enabel; use App\\Entity\\Enabel\\User; use Enabel\\UserBundle\\Controller\\Admin\\UserCrudController as BaseUserCrudController; class UserCrudController extends BaseUserCrudController { public static function getEntityFqcn(): string { return User::class; } } Step 7: Setup the database bin/console make:migration bin/console doctrine:migration:migrate Usage Authentication To enable the authentication follow these instructions Easyadmin To manage users in your Easyadmin dashboard follow these instructions Command This bundle come with a bunch of commands, here is the documentation","title":"Installation"},{"location":"#installation","text":"Make sure Composer is installed globally, as explained in the installation chapter of the Composer documentation.","title":"Installation"},{"location":"#installation-with-symfony-flex","text":"Add our recipes endpoint { \"extra\": { \"symfony\": { \"endpoint\": [ \"https://api.github.com/repos/Enabel/recipes/contents/index.json?ref=flex/main\", \"flex://defaults\" ], \"allow-contrib\": true } } } Don't forget to run compose update as you have just modified his configuration. Install with composer composer require enabel/user-bundle","title":"Installation with Symfony Flex"},{"location":"#setup-database","text":"bin/console make:migration bin/console doctrine:migration:migrate","title":"Setup database"},{"location":"#installation-without-symfony-flex","text":"","title":"Installation without Symfony Flex"},{"location":"#step-1-download-the-bundle","text":"Open a command console, enter your project directory and execute the following command to download the latest stable version of this bundle: composer require enabel/user-bundle","title":"Step 1: Download the Bundle"},{"location":"#step-2-enable-the-bundle","text":"Then, enable the bundle by adding it to the list of registered bundles in the config/bundles.php file of your project: // config/bundles.php return [ // ... Enabel\\UserBundle\\EnabelUserBundle::class => ['all' => true], KnpU\\OAuth2ClientBundle\\KnpUOAuth2ClientBundle::class => ['all' => true], ];","title":"Step 2: Enable the Bundle"},{"location":"#step-3-import-routing-configuration","text":"enable the routes by adding it to the list of registered routes in the config/routes.yaml file of your project: # config/routes.yaml enabel_user: resource: \"@EnabelUserBundle/config/routes.yaml\"","title":"Step 3: Import routing configuration"},{"location":"#step-4-create-the-configuration","text":"Create a file /config/packages/enabel_user.yaml with this content: enabel_user: login_redirect_route: 'app_home' user_class: 'App\\Entity\\Enabel\\User' user_repository: 'App\\Repository\\Enabel\\UserRepository' available_locales: 'fr|en' Create/Update a file /config/packages/knpu_oauth2_client.yaml with this content: knpu_oauth2_client: clients: azure_o365: type: azure client_id: '%env(AZURE_CLIENT_ID)%' client_secret: '%env(AZURE_CLIENT_SECRET)%' api_version: 'v1.0' url_api: 'https://graph.microsoft.com/' redirect_route: enabel_azure_check Add the Azure variable in you .env file: ###> enabel/user-bundle ### AZURE_CLIENT_ID=paste_here_the_client_id AZURE_CLIENT_SECRET=paste_here_the_secret_id ###< enabel/user-bundle ###","title":"Step 4: Create the configuration"},{"location":"#step-5-create-entity-repository","text":"Create a entity and repository that extends the bundle one. The User entity /src/entity/Enabel/User.php <?php declare(strict_types=1); namespace App\\Entity\\Enabel; use App\\Repository\\Enabel\\UserRepository; use Doctrine\\ORM\\Mapping as ORM; use Enabel\\UserBundle\\Entity\\User as BaseUser; #[ORM\\Entity(repositoryClass: UserRepository::class)] class User extends BaseUser { } The according repository /src/Repository/Enabel/UserRepository.php <?php declare(strict_types=1); namespace App\\Repository\\Enabel; use App\\Entity\\Enabel\\User; use Doctrine\\Persistence\\ManagerRegistry; use Enabel\\UserBundle\\Repository\\UserRepository as BaseUserRepository; /** * @method User|null find($id, $lockMode = null, $lockVersion = null) * @method User|null findOneBy(array $criteria, array $orderBy = null) * @method array<User> findAll() * @method array<User> findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null) */ class UserRepository extends BaseUserRepository { public function __construct(ManagerRegistry $registry) { parent::__construct($registry, User::class); } }","title":"Step 5: Create entity &amp; repository"},{"location":"#step-6-create-the-admin-crud-controller","text":"Create a easyadmin crud controller that extends the bundle one. To manage user /src/Controller/Admin/Enabel/UserCrudController.php <?php declare(strict_types=1); namespace App\\Controller\\Admin\\Enabel; use App\\Entity\\Enabel\\User; use Enabel\\UserBundle\\Controller\\Admin\\UserCrudController as BaseUserCrudController; class UserCrudController extends BaseUserCrudController { public static function getEntityFqcn(): string { return User::class; } }","title":"Step 6: Create the admin crud controller"},{"location":"#step-7-setup-the-database","text":"bin/console make:migration bin/console doctrine:migration:migrate","title":"Step 7: Setup the database"},{"location":"#usage","text":"","title":"Usage"},{"location":"#authentication","text":"To enable the authentication follow these instructions","title":"Authentication"},{"location":"#easyadmin","text":"To manage users in your Easyadmin dashboard follow these instructions","title":"Easyadmin"},{"location":"#command","text":"This bundle come with a bunch of commands, here is the documentation","title":"Command"},{"location":"authentication/","text":"Authentication Configure encoders security: ... password_hashers: ... Enabel\\UserBundle\\Entity\\User: argon2i Configure providers security: ... providers: ... enabel_user_provider: id: enabel_user.provider Configure firewall security: ... firewalls: ... main: lazy: true provider: enabel_user_provider custom_authenticator: - enabel_user.local_authenticator - enabel_user.azure_authenticator # https://symfony.com/doc/current/security/impersonating_user.html switch_user: { role: ROLE_ALLOWED_TO_SWITCH } remember_me: secret: \"%env(APP_SECRET)%\" name: ENABEL_REMEMBER_ME lifetime: 31536000 path: / always_remember_me: true logout: path: enabel_logout target: enabel_login Configure roles security: ... role_hierarchy: ... ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH] ROLE_ADMIN: [ROLE_USER] ROLE_USER: [] Setup access control security: ... access_control: - { path: ^/auth/login, roles: PUBLIC_ACCESS } - { path: ^/azure/login, roles: PUBLIC_ACCESS } - { path: ^/azure/check, roles: PUBLIC_ACCESS } - { path: ^/auth/logout, roles: PUBLIC_ACCESS } - { path: ^/admin, roles: ROLE_ADMIN } ... Azure Client & secret id You need to request a new clientId and clientSecret for a new application on Azure. Go to Azure portal https://portal.azure.com Go to Active Directory Go to App registrations Click on new Registration and follow the wizard. (give it a name like 'auth-connector-APP_NAME' and make a decision on the supported accounts, single tenant should be enough but this depends on your organisation) When created the application is created write down the following details 'Application (client) id', this will be your AZURE_CLIENT_ID Then we go in the menu to the API permissions to view the permissions that are required You should see that the following delegated permissions are granted: Microsoft Graph: User.Read Click on the Grant admin consent for ...Company... Go in the menu to Certificates & secrets Click on new client secret Give it a description and expiry date and the value will be your AZURE_CLIENT_SECRET Then we go in the menu to the Manifest to accept the additional information that is returned in the token see the user details section Change the value of acceptMappedClaims from null to true Finally, go in the menu to Authentication Click on Add a platform Choose Web applications Web Fill the info & click on Configure Redirect URIs: https://127.0.0.1:8000/azure/check Front-channel logout URL: leave blank Implicit grant and hybrid flows: Select ID tokens Optionally, you can add more URIs like for testing environments or also localhost by clicking on Add URI That's it, include the previous information AZURE_CLIENT_ID & AZURE_CLIENT_SECRET in your .env.local file. Example: AZURE_CLIENT_ID=19b725a4-1a39-5fa6-bdd0-7fe992bcf33c AZURE_CLIENT_SECRET=kW74Q~.nWu9HVZ7Rnj.2y][x9.cQTuef:et_ User details from Azure AD The authenticator needs additional information from Azure AD for the user's profile. Follow these steps to add this information to the authentication token. Go to Azure portal https://portal.azure.com Go to Active Directory Go to App registrations Retrieve the application registered in the previous step In the overview, go to Managed application in local directory: auth-connector-... Go to Single sign-on and edit/add the Attributes & Claims as follows: Claim name Type Value country JWT user.country displayName JWT user.displayname employeeId JWT user.employeeid jobTitle JWT user.jobtitle language JWT user.preferredlanguage That's it, you will now be able to connect with your Azure account.","title":"Authentication"},{"location":"authentication/#authentication","text":"","title":"Authentication"},{"location":"authentication/#configure-encoders","text":"security: ... password_hashers: ... Enabel\\UserBundle\\Entity\\User: argon2i","title":"Configure encoders"},{"location":"authentication/#configure-providers","text":"security: ... providers: ... enabel_user_provider: id: enabel_user.provider","title":"Configure providers"},{"location":"authentication/#configure-firewall","text":"security: ... firewalls: ... main: lazy: true provider: enabel_user_provider custom_authenticator: - enabel_user.local_authenticator - enabel_user.azure_authenticator # https://symfony.com/doc/current/security/impersonating_user.html switch_user: { role: ROLE_ALLOWED_TO_SWITCH } remember_me: secret: \"%env(APP_SECRET)%\" name: ENABEL_REMEMBER_ME lifetime: 31536000 path: / always_remember_me: true logout: path: enabel_logout target: enabel_login","title":"Configure firewall"},{"location":"authentication/#configure-roles","text":"security: ... role_hierarchy: ... ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH] ROLE_ADMIN: [ROLE_USER] ROLE_USER: []","title":"Configure roles"},{"location":"authentication/#setup-access-control","text":"security: ... access_control: - { path: ^/auth/login, roles: PUBLIC_ACCESS } - { path: ^/azure/login, roles: PUBLIC_ACCESS } - { path: ^/azure/check, roles: PUBLIC_ACCESS } - { path: ^/auth/logout, roles: PUBLIC_ACCESS } - { path: ^/admin, roles: ROLE_ADMIN } ...","title":"Setup access control"},{"location":"authentication/#azure","text":"","title":"Azure"},{"location":"authentication/#client-secret-id","text":"You need to request a new clientId and clientSecret for a new application on Azure. Go to Azure portal https://portal.azure.com Go to Active Directory Go to App registrations Click on new Registration and follow the wizard. (give it a name like 'auth-connector-APP_NAME' and make a decision on the supported accounts, single tenant should be enough but this depends on your organisation) When created the application is created write down the following details 'Application (client) id', this will be your AZURE_CLIENT_ID Then we go in the menu to the API permissions to view the permissions that are required You should see that the following delegated permissions are granted: Microsoft Graph: User.Read Click on the Grant admin consent for ...Company... Go in the menu to Certificates & secrets Click on new client secret Give it a description and expiry date and the value will be your AZURE_CLIENT_SECRET Then we go in the menu to the Manifest to accept the additional information that is returned in the token see the user details section Change the value of acceptMappedClaims from null to true Finally, go in the menu to Authentication Click on Add a platform Choose Web applications Web Fill the info & click on Configure Redirect URIs: https://127.0.0.1:8000/azure/check Front-channel logout URL: leave blank Implicit grant and hybrid flows: Select ID tokens Optionally, you can add more URIs like for testing environments or also localhost by clicking on Add URI That's it, include the previous information AZURE_CLIENT_ID & AZURE_CLIENT_SECRET in your .env.local file. Example: AZURE_CLIENT_ID=19b725a4-1a39-5fa6-bdd0-7fe992bcf33c AZURE_CLIENT_SECRET=kW74Q~.nWu9HVZ7Rnj.2y][x9.cQTuef:et_","title":"Client &amp; secret id"},{"location":"authentication/#user-details-from-azure-ad","text":"The authenticator needs additional information from Azure AD for the user's profile. Follow these steps to add this information to the authentication token. Go to Azure portal https://portal.azure.com Go to Active Directory Go to App registrations Retrieve the application registered in the previous step In the overview, go to Managed application in local directory: auth-connector-... Go to Single sign-on and edit/add the Attributes & Claims as follows: Claim name Type Value country JWT user.country displayName JWT user.displayname employeeId JWT user.employeeid jobTitle JWT user.jobtitle language JWT user.preferredlanguage That's it, you will now be able to connect with your Azure account.","title":"User details from Azure AD"},{"location":"command/","text":"Commands Create a new user The enabel:user:add command creates new users and saves them in the database: bin/console enabel:user:add email password display-name By default, the command creates regular users. To create administrator users (ROLE_ADMIN), add the --admin option: bin/console enabel:user:add email password display-name --admin To create super administrator users (ROLE_SUPER_ADMIN), add the --super-admin option: bin/console enabel:user:add email password display-name --super-admin If you omit any of the required arguments, the command will ask you to provide the missing values: # command will ask you for the password and display-name bin/console enabel:user:add email # command will ask you for all arguments bin/console enabel:user:add Promote a user The enabel:user:promote command promote a user to a administrator: bin/console enabel:user:promote email By default, the command promote the user to a administrator (ROLE_ADMIN). To promote to super administrator users (ROLE_SUPER_ADMIN), add the --super-admin option: bin/console enabel:user:promote email --super-admin If you omit the email, the command will ask you to provide the missing values: # command will ask you for the email bin/console enabel:user:promote Demote a user The enabel:user:demote command demote a administrator to a user: bin/console enabel:user:demote email By default, the command demote the administrator to a user. To demote to super administrator users (ROLE_SUPER_ADMIN), add the --super-admin option: bin/console enabel:user:demote email --super-admin If you omit the email, the command will ask you to provide the missing values: # command will ask you for the email bin/console enabel:user:demote","title":"Command"},{"location":"command/#commands","text":"","title":"Commands"},{"location":"command/#create-a-new-user","text":"The enabel:user:add command creates new users and saves them in the database: bin/console enabel:user:add email password display-name By default, the command creates regular users. To create administrator users (ROLE_ADMIN), add the --admin option: bin/console enabel:user:add email password display-name --admin To create super administrator users (ROLE_SUPER_ADMIN), add the --super-admin option: bin/console enabel:user:add email password display-name --super-admin If you omit any of the required arguments, the command will ask you to provide the missing values: # command will ask you for the password and display-name bin/console enabel:user:add email # command will ask you for all arguments bin/console enabel:user:add","title":"Create a new user"},{"location":"command/#promote-a-user","text":"The enabel:user:promote command promote a user to a administrator: bin/console enabel:user:promote email By default, the command promote the user to a administrator (ROLE_ADMIN). To promote to super administrator users (ROLE_SUPER_ADMIN), add the --super-admin option: bin/console enabel:user:promote email --super-admin If you omit the email, the command will ask you to provide the missing values: # command will ask you for the email bin/console enabel:user:promote","title":"Promote a user"},{"location":"command/#demote-a-user","text":"The enabel:user:demote command demote a administrator to a user: bin/console enabel:user:demote email By default, the command demote the administrator to a user. To demote to super administrator users (ROLE_SUPER_ADMIN), add the --super-admin option: bin/console enabel:user:demote email --super-admin If you omit the email, the command will ask you to provide the missing values: # command will ask you for the email bin/console enabel:user:demote","title":"Demote a user"},{"location":"easyadmin/","text":"Manage users in your Easyadmin dashboard Go to your dashboard controller, example : src/Controller/Admin/DashboardController.php To access the user management, you need to add the role ROLE_MANAGE_USER to the user. <?php namespace App\\Controller\\Admin; ... use Enabel\\UserBundle\\Controller\\Admin\\UserTrait; use Enabel\\UserBundle\\Controller\\Admin\\DashboardTrait; class DashboardController extends AbstractDashboardController { ... use UserTrait; use DashboardTrait; ... public function configureMenuItems(): iterable { ... yield from $this->userMenuEntry(); ...","title":"EasyAdmin"},{"location":"easyadmin/#manage-users-in-your-easyadmin-dashboard","text":"Go to your dashboard controller, example : src/Controller/Admin/DashboardController.php To access the user management, you need to add the role ROLE_MANAGE_USER to the user. <?php namespace App\\Controller\\Admin; ... use Enabel\\UserBundle\\Controller\\Admin\\UserTrait; use Enabel\\UserBundle\\Controller\\Admin\\DashboardTrait; class DashboardController extends AbstractDashboardController { ... use UserTrait; use DashboardTrait; ... public function configureMenuItems(): iterable { ... yield from $this->userMenuEntry(); ...","title":"Manage users in your Easyadmin dashboard"}]}